<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">
	<!-- 1.配置数据源 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="jdbc:mysql://localhost:3306/mybatis"></property>
		<property name="username" value="root"></property>
		<property name="password" value="root"></property>
		<property name="driverClassName" value="com.mysql.jdbc.Driver"></property>
	</bean>
	
	<!-- 2.mybatis的sqlSession的工厂:SqlSessionFactoryBean
			dataSource:引用数据源
			typealiasesPackage : 指定实体类的报名,自动将实体的简单类名映射成别名.
	 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"></property>
		<property name="typeAliasesPackage" value="com.bin.mybatis.integratespring.bean"></property>
	</bean>
	
	<!-- 3.mybatis自动扫描加载sql映射文件/接口:MapperScannerConfigurer 
		basePackage : 指定sql映射文件/接口所在的包.(自动扫描)
		sqlSessionFactory : 应用上面定义的sqlSessionFactory
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.bin.mybatis.integratespring.mapper"></property>
		<property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
	</bean>
	
	<!-- 4. 事务管理.DataSourceTransactionManager
		dataSource : 引用上面定义的数据源.
	 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- 5. 使用声明式事务
			transaction-manager :应用上面定义的事务管理器.
	 -->
	<tx:annotation-driven transaction-manager="txManager"/>
</beans>
